/**
 * @input A : Integer array
 * @input n1 : Integer array's ( A ) length
 * @input B : Integer
 * 
 * @Output Integer
 */
 
int peak(int *arr,int n){
    int l=0;
    int r=n-1;
    while(l<r){
        int mid=l+(r-l)/2;
        if(arr[mid]<arr[mid+1]) l=mid+1;
        else if(arr[mid]>arr[mid+1]) r=mid;
    }
    return l;
}
    
int abse(int *A,int l, int r,int B){
    while(l<=r){
        int mid=l+(r-l)/2;
        if(A[mid]==B) return mid;
        else if(A[mid]>B) r=mid-1;
        else l=mid+1;
    }
    return -1;
}

int dbs(int *A,int l, int r,int B){
    while(l<=r){
        int mid=l+(r-l)/2;
        if(A[mid]==B) return mid;
        else if(A[mid]<B) r=mid-1;
        else l=mid+1;
    }
    return -1;
}

int solve(int* A, int n1, int B) {
    int p=peak(A,n1);
    if(A[p]==B) return p;
    int i=abse(A,0,p-1,B);
    if(i>=0) return i;
    else return dbs(A,p+1,n1-1,B);
    
}
